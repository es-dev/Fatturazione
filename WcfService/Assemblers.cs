#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WcfService.Assemblers
{
	using Telerik.OpenAccess;
	using WcfService.Dto;
	using WcfService.Converters;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IAziendaAssembler : IAssembler<AziendaDto, Azienda>
	{ 
	
	}
	
	public partial class AziendaAssemblerBase : Assembler<AziendaDto, Azienda>
	{
		/// <summary>
	    /// Invoked after the AziendaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AziendaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AziendaDto dto);
	
		/// <summary>
	    /// Invoked after the Azienda instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Azienda"/> instance.</param>
		partial void OnEntityAssembled(Azienda entity);
		
	    public override Azienda Assemble(Azienda entity, AziendaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Azienda();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.PartitaIva = dto.PartitaIva;
			entity.Telefono = dto.Telefono;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.PEC = dto.PEC;
			entity.Codice = dto.Codice;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
			entity.Dipendenti = dto.Dipendenti;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AziendaDto Assemble(Azienda entity)
	    {
	        AziendaDto dto = new AziendaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.PartitaIva = entity.PartitaIva;
			dto.Telefono = entity.Telefono;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.PEC = entity.PEC;
			dto.Codice = entity.Codice;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			dto.Dipendenti = entity.Dipendenti;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Azienda entity, AziendaDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Azienda entity, AziendaDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Clientes.Add(dtoItem);
			}

			SocioAssembler socioAssembler = new SocioAssembler();

			dto.Socios = new List<SocioDto>();
			foreach (Socio item in entity.Socios)
			{
				var dtoItem = socioAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Socios.Add(dtoItem);
			}

			AnagraficaClienteAssembler anagraficaClienteAssembler = new AnagraficaClienteAssembler();

			dto.AnagraficaClientes = new List<AnagraficaClienteDto>();
			foreach (AnagraficaCliente item in entity.AnagraficaClientes)
			{
				var dtoItem = anagraficaClienteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.AnagraficaClientes.Add(dtoItem);
			}

			AccountAssembler accountAssembler = new AccountAssembler();

			dto.Accounts = new List<AccountDto>();
			foreach (Account item in entity.Accounts)
			{
				var dtoItem = accountAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Accounts.Add(dtoItem);
			}

			TrasmissioneAssembler trasmissioneAssembler = new TrasmissioneAssembler();

			dto.Trasmissiones = new List<TrasmissioneDto>();
			foreach (Trasmissione item in entity.Trasmissiones)
			{
				var dtoItem = trasmissioneAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Trasmissiones.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AziendaAssembler : AziendaAssemblerBase, IAziendaAssembler
	{
	    
	}
	
	public partial interface IClienteAssembler : IAssembler<ClienteDto, Cliente>
	{ 
	
	}
	
	public partial class ClienteAssemblerBase : Assembler<ClienteDto, Cliente>
	{
		/// <summary>
	    /// Invoked after the ClienteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ClienteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ClienteDto dto);
	
		/// <summary>
	    /// Invoked after the Cliente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Cliente"/> instance.</param>
		partial void OnEntityAssembled(Cliente entity);
		
	    public override Cliente Assemble(Cliente entity, ClienteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Cliente();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.AnagraficaClienteId = dto.AnagraficaClienteId;
			entity.AnagraficaPAId = dto.AnagraficaPAId;
			entity.Tipo = dto.Tipo;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ClienteDto Assemble(Cliente entity)
	    {
	        ClienteDto dto = new ClienteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.AnagraficaClienteId = entity.AnagraficaClienteId;
			dto.AnagraficaPAId = entity.AnagraficaPAId;
			dto.Tipo = entity.Tipo;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Cliente entity, ClienteDto dto)
	    {
			AnagraficaClienteAssembler anagraficaClienteAssembler = new AnagraficaClienteAssembler();
			dto.AnagraficaCliente = anagraficaClienteAssembler.Assemble(entity.AnagraficaCliente);

			AnagraficaPAAssembler anagraficaPAAssembler = new AnagraficaPAAssembler();
			dto.AnagraficaPA = anagraficaPAAssembler.Assemble(entity.AnagraficaPA);

			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Cliente entity, ClienteDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();

			dto.Fatturas = new List<FatturaDto>();
			foreach (Fattura item in entity.Fatturas)
			{
				var dtoItem = fatturaAssembler.Assemble(item);
				dtoItem.Cliente = dto;
				dto.Fatturas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ClienteAssembler : ClienteAssemblerBase, IClienteAssembler
	{
	    
	}
	
	public partial interface IFatturaAssembler : IAssembler<FatturaDto, Fattura>
	{ 
	
	}
	
	public partial class FatturaAssemblerBase : Assembler<FatturaDto, Fattura>
	{
		/// <summary>
	    /// Invoked after the FatturaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaDto dto);
	
		/// <summary>
	    /// Invoked after the Fattura instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Fattura"/> instance.</param>
		partial void OnEntityAssembled(Fattura entity);
		
	    public override Fattura Assemble(Fattura entity, FatturaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Fattura();
	        }
			
			entity.Id = dto.Id;
			entity.ClienteId = dto.ClienteId;
			entity.Versione = dto.Versione;
			entity.Signature = dto.Signature;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaDto Assemble(Fattura entity)
	    {
	        FatturaDto dto = new FatturaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ClienteId = entity.ClienteId;
			dto.Versione = entity.Versione;
			dto.Signature = entity.Signature;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Fattura entity, FatturaDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();
			dto.Cliente = clienteAssembler.Assemble(entity.Cliente);

			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

	    }
	
	    public override void AssembleCollections(Fattura entity, FatturaDto dto)
	    {
			TrasmissioneAssembler trasmissioneAssembler = new TrasmissioneAssembler();

			dto.Trasmissiones = new List<TrasmissioneDto>();
			foreach (Trasmissione item in entity.Trasmissiones)
			{
				var dtoItem = trasmissioneAssembler.Assemble(item);
				dtoItem.Fattura = dto;
				dto.Trasmissiones.Add(dtoItem);
			}

			IncassoAssembler incassoAssembler = new IncassoAssembler();

			dto.Incassos = new List<IncassoDto>();
			foreach (Incasso item in entity.Incassos)
			{
				var dtoItem = incassoAssembler.Assemble(item);
				dtoItem.Fattura = dto;
				dto.Incassos.Add(dtoItem);
			}

			FatturaElettronicaBodyAssembler fatturaElettronicaBodyAssembler = new FatturaElettronicaBodyAssembler();

			dto.FatturaElettronicaBodies = new List<FatturaElettronicaBodyDto>();
			foreach (FatturaElettronicaBody item in entity.FatturaElettronicaBodies)
			{
				var dtoItem = fatturaElettronicaBodyAssembler.Assemble(item);
				dtoItem.Fattura = dto;
				dto.FatturaElettronicaBodies.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FatturaAssembler : FatturaAssemblerBase, IFatturaAssembler
	{
	    
	}
	
	public partial interface ITrasmissioneAssembler : IAssembler<TrasmissioneDto, Trasmissione>
	{ 
	
	}
	
	public partial class TrasmissioneAssemblerBase : Assembler<TrasmissioneDto, Trasmissione>
	{
		/// <summary>
	    /// Invoked after the TrasmissioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="TrasmissioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(TrasmissioneDto dto);
	
		/// <summary>
	    /// Invoked after the Trasmissione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Trasmissione"/> instance.</param>
		partial void OnEntityAssembled(Trasmissione entity);
		
	    public override Trasmissione Assemble(Trasmissione entity, TrasmissioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Trasmissione();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaId = dto.FatturaId;
			entity.AziendaId = dto.AziendaId;
			entity.Stato = dto.Stato;
			entity.Trasmessa = dto.Trasmessa;
			entity.XmlFile = dto.XmlFile;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override TrasmissioneDto Assemble(Trasmissione entity)
	    {
	        TrasmissioneDto dto = new TrasmissioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaId = entity.FatturaId;
			dto.AziendaId = entity.AziendaId;
			dto.Stato = entity.Stato;
			dto.Trasmessa = entity.Trasmessa;
			dto.XmlFile = entity.XmlFile;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Trasmissione entity, TrasmissioneDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Trasmissione entity, TrasmissioneDto dto)
	    {
	    }
	
	}
	
	
	public partial class TrasmissioneAssembler : TrasmissioneAssemblerBase, ITrasmissioneAssembler
	{
	    
	}
	
	public partial interface IAnagraficaClienteAssembler : IAssembler<AnagraficaClienteDto, AnagraficaCliente>
	{ 
	
	}
	
	public partial class AnagraficaClienteAssemblerBase : Assembler<AnagraficaClienteDto, AnagraficaCliente>
	{
		/// <summary>
	    /// Invoked after the AnagraficaClienteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaClienteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaClienteDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaCliente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaCliente"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaCliente entity);
		
	    public override AnagraficaCliente Assemble(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaCliente();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Cognome = dto.Cognome;
			entity.Codice = dto.Codice;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaClienteDto Assemble(AnagraficaCliente entity)
	    {
	        AnagraficaClienteDto dto = new AnagraficaClienteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Cognome = entity.Cognome;
			dto.Codice = entity.Codice;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.AnagraficaCliente = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AnagraficaClienteAssembler : AnagraficaClienteAssemblerBase, IAnagraficaClienteAssembler
	{
	    
	}
	
	public partial interface IIncassoAssembler : IAssembler<IncassoDto, Incasso>
	{ 
	
	}
	
	public partial class IncassoAssemblerBase : Assembler<IncassoDto, Incasso>
	{
		/// <summary>
	    /// Invoked after the IncassoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="IncassoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(IncassoDto dto);
	
		/// <summary>
	    /// Invoked after the Incasso instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Incasso"/> instance.</param>
		partial void OnEntityAssembled(Incasso entity);
		
	    public override Incasso Assemble(Incasso entity, IncassoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Incasso();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaId = dto.FatturaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override IncassoDto Assemble(Incasso entity)
	    {
	        IncassoDto dto = new IncassoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaId = entity.FatturaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Incasso entity, IncassoDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

	    }
	
	    public override void AssembleCollections(Incasso entity, IncassoDto dto)
	    {
	    }
	
	}
	
	
	public partial class IncassoAssembler : IncassoAssemblerBase, IIncassoAssembler
	{
	    
	}
	
	public partial interface ISocioAssembler : IAssembler<SocioDto, Socio>
	{ 
	
	}
	
	public partial class SocioAssemblerBase : Assembler<SocioDto, Socio>
	{
		/// <summary>
	    /// Invoked after the SocioDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SocioDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SocioDto dto);
	
		/// <summary>
	    /// Invoked after the Socio instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Socio"/> instance.</param>
		partial void OnEntityAssembled(Socio entity);
		
	    public override Socio Assemble(Socio entity, SocioDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Socio();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.Cognome = dto.Cognome;
			entity.Nome = dto.Nome;
			entity.TipoCarica = dto.TipoCarica;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SocioDto Assemble(Socio entity)
	    {
	        SocioDto dto = new SocioDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.Cognome = entity.Cognome;
			dto.Nome = entity.Nome;
			dto.TipoCarica = entity.TipoCarica;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Socio entity, SocioDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Socio entity, SocioDto dto)
	    {
	    }
	
	}
	
	
	public partial class SocioAssembler : SocioAssemblerBase, ISocioAssembler
	{
	    
	}
	
	public partial interface IAnagraficaPAAssembler : IAssembler<AnagraficaPADto, AnagraficaPA>
	{ 
	
	}
	
	public partial class AnagraficaPAAssemblerBase : Assembler<AnagraficaPADto, AnagraficaPA>
	{
		/// <summary>
	    /// Invoked after the AnagraficaPADto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaPADto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaPADto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaPA instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaPA"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaPA entity);
		
	    public override AnagraficaPA Assemble(AnagraficaPA entity, AnagraficaPADto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaPA();
	        }
			
			entity.Id = dto.Id;
			entity.Codice = dto.Codice;
			entity.Denominazione = dto.Denominazione;
			entity.Comune = dto.Comune;
			entity.NomeResponsabile = dto.NomeResponsabile;
			entity.CognomeResponsabile = dto.CognomeResponsabile;
			entity.CAP = dto.CAP;
			entity.Provincia = dto.Provincia;
			entity.Regione = dto.Regione;
			entity.SitoIstituzionale = dto.SitoIstituzionale;
			entity.Indirizzo = dto.Indirizzo;
			entity.TitoloResponsabile = dto.TitoloResponsabile;
			entity.TipologiaIstat = dto.TipologiaIstat;
			entity.TipologiaAmministrazione = dto.TipologiaAmministrazione;
			entity.Acronimo = dto.Acronimo;
			entity.CfValidato = dto.CfValidato;
			entity.CodiceFiscale = dto.CodiceFiscale;
			entity.Email = dto.Email;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaPADto Assemble(AnagraficaPA entity)
	    {
	        AnagraficaPADto dto = new AnagraficaPADto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Codice = entity.Codice;
			dto.Denominazione = entity.Denominazione;
			dto.Comune = entity.Comune;
			dto.NomeResponsabile = entity.NomeResponsabile;
			dto.CognomeResponsabile = entity.CognomeResponsabile;
			dto.CAP = entity.CAP;
			dto.Provincia = entity.Provincia;
			dto.Regione = entity.Regione;
			dto.SitoIstituzionale = entity.SitoIstituzionale;
			dto.Indirizzo = entity.Indirizzo;
			dto.TitoloResponsabile = entity.TitoloResponsabile;
			dto.TipologiaIstat = entity.TipologiaIstat;
			dto.TipologiaAmministrazione = entity.TipologiaAmministrazione;
			dto.Acronimo = entity.Acronimo;
			dto.CfValidato = entity.CfValidato;
			dto.CodiceFiscale = entity.CodiceFiscale;
			dto.Email = entity.Email;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaPA entity, AnagraficaPADto dto)
	    {
	    }
	
	    public override void AssembleCollections(AnagraficaPA entity, AnagraficaPADto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.AnagraficaPA = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AnagraficaPAAssembler : AnagraficaPAAssemblerBase, IAnagraficaPAAssembler
	{
	    
	}
	
	public partial interface IFatturaElettronicaHeaderAssembler : IAssembler<FatturaElettronicaHeaderDto, FatturaElettronicaHeader>
	{ 
	
	}
	
	public partial class FatturaElettronicaHeaderAssemblerBase : Assembler<FatturaElettronicaHeaderDto, FatturaElettronicaHeader>
	{
		/// <summary>
	    /// Invoked after the FatturaElettronicaHeaderDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaElettronicaHeaderDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaElettronicaHeaderDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaElettronicaHeader instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaElettronicaHeader"/> instance.</param>
		partial void OnEntityAssembled(FatturaElettronicaHeader entity);
		
	    public override FatturaElettronicaHeader Assemble(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaElettronicaHeader();
	        }
			
			entity.Id = dto.Id;
			entity.SoggettoEmittente = dto.SoggettoEmittente;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaElettronicaHeaderDto Assemble(FatturaElettronicaHeader entity)
	    {
	        FatturaElettronicaHeaderDto dto = new FatturaElettronicaHeaderDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.SoggettoEmittente = entity.SoggettoEmittente;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

			DatiTrasmissioneAssembler datiTrasmissioneAssembler = new DatiTrasmissioneAssembler();
			dto.DatiTrasmissione = datiTrasmissioneAssembler.Assemble(entity.DatiTrasmissione);

			CedentePrestatoreAssembler cedentePrestatoreAssembler = new CedentePrestatoreAssembler();
			dto.CedentePrestatore = cedentePrestatoreAssembler.Assemble(entity.CedentePrestatore);

			CessionarioCommittenteAssembler cessionarioCommittenteAssembler = new CessionarioCommittenteAssembler();
			dto.CessionarioCommittente = cessionarioCommittenteAssembler.Assemble(entity.CessionarioCommittente);

	    }
	
	    public override void AssembleCollections(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
	    }
	
	}
	
	
	public partial class FatturaElettronicaHeaderAssembler : FatturaElettronicaHeaderAssemblerBase, IFatturaElettronicaHeaderAssembler
	{
	    
	}
	
	public partial interface IFatturaElettronicaBodyAssembler : IAssembler<FatturaElettronicaBodyDto, FatturaElettronicaBody>
	{ 
	
	}
	
	public partial class FatturaElettronicaBodyAssemblerBase : Assembler<FatturaElettronicaBodyDto, FatturaElettronicaBody>
	{
		/// <summary>
	    /// Invoked after the FatturaElettronicaBodyDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaElettronicaBodyDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaElettronicaBodyDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaElettronicaBody instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaElettronicaBody"/> instance.</param>
		partial void OnEntityAssembled(FatturaElettronicaBody entity);
		
	    public override FatturaElettronicaBody Assemble(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaElettronicaBody();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaId = dto.FatturaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaElettronicaBodyDto Assemble(FatturaElettronicaBody entity)
	    {
	        FatturaElettronicaBodyDto dto = new FatturaElettronicaBodyDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaId = entity.FatturaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

			DatiGeneraliAssembler datiGeneraliAssembler = new DatiGeneraliAssembler();
			dto.DatiGenerali = datiGeneraliAssembler.Assemble(entity.DatiGenerali);

			DatiBeniServiziAssembler datiBeniServiziAssembler = new DatiBeniServiziAssembler();
			dto.DatiBeniServizi = datiBeniServiziAssembler.Assemble(entity.DatiBeniServizi);

	    }
	
	    public override void AssembleCollections(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
			DatiPagamentoAssembler datiPagamentoAssembler = new DatiPagamentoAssembler();

			dto.DatiPagamentos = new List<DatiPagamentoDto>();
			foreach (DatiPagamento item in entity.DatiPagamentos)
			{
				var dtoItem = datiPagamentoAssembler.Assemble(item);
				dtoItem.FatturaElettronicaBody = dto;
				dto.DatiPagamentos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FatturaElettronicaBodyAssembler : FatturaElettronicaBodyAssemblerBase, IFatturaElettronicaBodyAssembler
	{
	    
	}
	
	public partial interface IDatiTrasmissioneAssembler : IAssembler<DatiTrasmissioneDto, DatiTrasmissione>
	{ 
	
	}
	
	public partial class DatiTrasmissioneAssemblerBase : Assembler<DatiTrasmissioneDto, DatiTrasmissione>
	{
		/// <summary>
	    /// Invoked after the DatiTrasmissioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiTrasmissioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiTrasmissioneDto dto);
	
		/// <summary>
	    /// Invoked after the DatiTrasmissione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiTrasmissione"/> instance.</param>
		partial void OnEntityAssembled(DatiTrasmissione entity);
		
	    public override DatiTrasmissione Assemble(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiTrasmissione();
	        }
			
			entity.Id = dto.Id;
			entity.ProgressivoInvio = dto.ProgressivoInvio;
			entity.FormatoTrasmissione = dto.FormatoTrasmissione;
			entity.CodiceDestinatario = dto.CodiceDestinatario;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiTrasmissioneDto Assemble(DatiTrasmissione entity)
	    {
	        DatiTrasmissioneDto dto = new DatiTrasmissioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ProgressivoInvio = entity.ProgressivoInvio;
			dto.FormatoTrasmissione = entity.FormatoTrasmissione;
			dto.CodiceDestinatario = entity.CodiceDestinatario;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

	    }
	
	    public override void AssembleCollections(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
			IdFiscaleAssembler idFiscaleAssembler = new IdFiscaleAssembler();

			dto.IdFiscales = new List<IdFiscaleDto>();
			foreach (IdFiscale item in entity.IdFiscales)
			{
				var dtoItem = idFiscaleAssembler.Assemble(item);
				dtoItem.DatiTrasmissione = dto;
				dto.IdFiscales.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiTrasmissioneAssembler : DatiTrasmissioneAssemblerBase, IDatiTrasmissioneAssembler
	{
	    
	}
	
	public partial interface IIdFiscaleAssembler : IAssembler<IdFiscaleDto, IdFiscale>
	{ 
	
	}
	
	public partial class IdFiscaleAssemblerBase : Assembler<IdFiscaleDto, IdFiscale>
	{
		/// <summary>
	    /// Invoked after the IdFiscaleDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="IdFiscaleDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(IdFiscaleDto dto);
	
		/// <summary>
	    /// Invoked after the IdFiscale instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="IdFiscale"/> instance.</param>
		partial void OnEntityAssembled(IdFiscale entity);
		
	    public override IdFiscale Assemble(IdFiscale entity, IdFiscaleDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new IdFiscale();
	        }
			
			entity.Id = dto.Id;
			entity.IdPaese = dto.IdPaese;
			entity.IdCodice = dto.IdCodice;
			entity.IdTrasmittente = dto.IdTrasmittente;
			entity.IdFiscaleIVA = dto.IdFiscaleIVA;
			entity.DatiAnagraficiCedenteId = dto.DatiAnagraficiCedenteId;
			entity.DatiAnagraficiCessionarioId = dto.DatiAnagraficiCessionarioId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override IdFiscaleDto Assemble(IdFiscale entity)
	    {
	        IdFiscaleDto dto = new IdFiscaleDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.IdPaese = entity.IdPaese;
			dto.IdCodice = entity.IdCodice;
			dto.IdTrasmittente = entity.IdTrasmittente;
			dto.IdFiscaleIVA = entity.IdFiscaleIVA;
			dto.DatiAnagraficiCedenteId = entity.DatiAnagraficiCedenteId;
			dto.DatiAnagraficiCessionarioId = entity.DatiAnagraficiCessionarioId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(IdFiscale entity, IdFiscaleDto dto)
	    {
			DatiTrasmissioneAssembler datiTrasmissioneAssembler = new DatiTrasmissioneAssembler();
			dto.DatiTrasmissione = datiTrasmissioneAssembler.Assemble(entity.DatiTrasmissione);

			DatiAnagraficiCedenteAssembler datiAnagraficiCedenteAssembler = new DatiAnagraficiCedenteAssembler();
			dto.DatiAnagraficiCedente = datiAnagraficiCedenteAssembler.Assemble(entity.DatiAnagraficiCedente);

			DatiAnagraficiCessionarioAssembler datiAnagraficiCessionarioAssembler = new DatiAnagraficiCessionarioAssembler();
			dto.DatiAnagraficiCessionario = datiAnagraficiCessionarioAssembler.Assemble(entity.DatiAnagraficiCessionario);

	    }
	
	    public override void AssembleCollections(IdFiscale entity, IdFiscaleDto dto)
	    {
	    }
	
	}
	
	
	public partial class IdFiscaleAssembler : IdFiscaleAssemblerBase, IIdFiscaleAssembler
	{
	    
	}
	
	public partial interface ICedentePrestatoreAssembler : IAssembler<CedentePrestatoreDto, CedentePrestatore>
	{ 
	
	}
	
	public partial class CedentePrestatoreAssemblerBase : Assembler<CedentePrestatoreDto, CedentePrestatore>
	{
		/// <summary>
	    /// Invoked after the CedentePrestatoreDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CedentePrestatoreDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CedentePrestatoreDto dto);
	
		/// <summary>
	    /// Invoked after the CedentePrestatore instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="CedentePrestatore"/> instance.</param>
		partial void OnEntityAssembled(CedentePrestatore entity);
		
	    public override CedentePrestatore Assemble(CedentePrestatore entity, CedentePrestatoreDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new CedentePrestatore();
	        }
			
			entity.Id = dto.Id;
			entity.RiferimentoAmministrazione = dto.RiferimentoAmministrazione;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CedentePrestatoreDto Assemble(CedentePrestatore entity)
	    {
	        CedentePrestatoreDto dto = new CedentePrestatoreDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RiferimentoAmministrazione = entity.RiferimentoAmministrazione;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(CedentePrestatore entity, CedentePrestatoreDto dto)
	    {
			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

			DatiAnagraficiCedenteAssembler datiAnagraficiCedenteAssembler = new DatiAnagraficiCedenteAssembler();
			dto.DatiAnagraficiCedente = datiAnagraficiCedenteAssembler.Assemble(entity.DatiAnagraficiCedente);

	    }
	
	    public override void AssembleCollections(CedentePrestatore entity, CedentePrestatoreDto dto)
	    {
			SedeAssembler sedeAssembler = new SedeAssembler();

			dto.Sedes = new List<SedeDto>();
			foreach (Sede item in entity.Sedes)
			{
				var dtoItem = sedeAssembler.Assemble(item);
				dtoItem.CedentePrestatore = dto;
				dto.Sedes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CedentePrestatoreAssembler : CedentePrestatoreAssemblerBase, ICedentePrestatoreAssembler
	{
	    
	}
	
	public partial interface IDatiAnagraficiCedenteAssembler : IAssembler<DatiAnagraficiCedenteDto, DatiAnagraficiCedente>
	{ 
	
	}
	
	public partial class DatiAnagraficiCedenteAssemblerBase : Assembler<DatiAnagraficiCedenteDto, DatiAnagraficiCedente>
	{
		/// <summary>
	    /// Invoked after the DatiAnagraficiCedenteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiAnagraficiCedenteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiAnagraficiCedenteDto dto);
	
		/// <summary>
	    /// Invoked after the DatiAnagraficiCedente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiAnagraficiCedente"/> instance.</param>
		partial void OnEntityAssembled(DatiAnagraficiCedente entity);
		
	    public override DatiAnagraficiCedente Assemble(DatiAnagraficiCedente entity, DatiAnagraficiCedenteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiAnagraficiCedente();
	        }
			
			entity.Id = dto.Id;
			entity.CodiceFiscale = dto.CodiceFiscale;
			entity.AlboProfessionale = dto.AlboProfessionale;
			entity.ProvinciaAlbo = dto.ProvinciaAlbo;
			entity.NumeroIscrizioneAlbo = dto.NumeroIscrizioneAlbo;
			entity.DataIscrizioneAlbo = dto.DataIscrizioneAlbo;
			entity.RegimeFiscale = dto.RegimeFiscale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiAnagraficiCedenteDto Assemble(DatiAnagraficiCedente entity)
	    {
	        DatiAnagraficiCedenteDto dto = new DatiAnagraficiCedenteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CodiceFiscale = entity.CodiceFiscale;
			dto.AlboProfessionale = entity.AlboProfessionale;
			dto.ProvinciaAlbo = entity.ProvinciaAlbo;
			dto.NumeroIscrizioneAlbo = entity.NumeroIscrizioneAlbo;
			dto.DataIscrizioneAlbo = entity.DataIscrizioneAlbo;
			dto.RegimeFiscale = entity.RegimeFiscale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiAnagraficiCedente entity, DatiAnagraficiCedenteDto dto)
	    {
			CedentePrestatoreAssembler cedentePrestatoreAssembler = new CedentePrestatoreAssembler();
			dto.CedentePrestatore = cedentePrestatoreAssembler.Assemble(entity.CedentePrestatore);

	    }
	
	    public override void AssembleCollections(DatiAnagraficiCedente entity, DatiAnagraficiCedenteDto dto)
	    {
			IdFiscaleAssembler idFiscaleAssembler = new IdFiscaleAssembler();

			dto.IdFiscales = new List<IdFiscaleDto>();
			foreach (IdFiscale item in entity.IdFiscales)
			{
				var dtoItem = idFiscaleAssembler.Assemble(item);
				dtoItem.DatiAnagraficiCedente = dto;
				dto.IdFiscales.Add(dtoItem);
			}

			AnagraficaAssembler anagraficaAssembler = new AnagraficaAssembler();

			dto.Anagraficas = new List<AnagraficaDto>();
			foreach (Anagrafica item in entity.Anagraficas)
			{
				var dtoItem = anagraficaAssembler.Assemble(item);
				dtoItem.DatiAnagraficiCedente = dto;
				dto.Anagraficas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiAnagraficiCedenteAssembler : DatiAnagraficiCedenteAssemblerBase, IDatiAnagraficiCedenteAssembler
	{
	    
	}
	
	public partial interface IAnagraficaAssembler : IAssembler<AnagraficaDto, Anagrafica>
	{ 
	
	}
	
	public partial class AnagraficaAssemblerBase : Assembler<AnagraficaDto, Anagrafica>
	{
		/// <summary>
	    /// Invoked after the AnagraficaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaDto dto);
	
		/// <summary>
	    /// Invoked after the Anagrafica instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Anagrafica"/> instance.</param>
		partial void OnEntityAssembled(Anagrafica entity);
		
	    public override Anagrafica Assemble(Anagrafica entity, AnagraficaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Anagrafica();
	        }
			
			entity.Id = dto.Id;
			entity.Denominazione = dto.Denominazione;
			entity.Nome = dto.Nome;
			entity.Cognome = dto.Cognome;
			entity.Titolo = dto.Titolo;
			entity.CodEORI = dto.CodEORI;
			entity.DatiAnagraficiCedenteId = dto.DatiAnagraficiCedenteId;
			entity.DatiAnagraficiCessionarioId = dto.DatiAnagraficiCessionarioId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaDto Assemble(Anagrafica entity)
	    {
	        AnagraficaDto dto = new AnagraficaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Denominazione = entity.Denominazione;
			dto.Nome = entity.Nome;
			dto.Cognome = entity.Cognome;
			dto.Titolo = entity.Titolo;
			dto.CodEORI = entity.CodEORI;
			dto.DatiAnagraficiCedenteId = entity.DatiAnagraficiCedenteId;
			dto.DatiAnagraficiCessionarioId = entity.DatiAnagraficiCessionarioId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Anagrafica entity, AnagraficaDto dto)
	    {
			DatiAnagraficiCedenteAssembler datiAnagraficiCedenteAssembler = new DatiAnagraficiCedenteAssembler();
			dto.DatiAnagraficiCedente = datiAnagraficiCedenteAssembler.Assemble(entity.DatiAnagraficiCedente);

			DatiAnagraficiCessionarioAssembler datiAnagraficiCessionarioAssembler = new DatiAnagraficiCessionarioAssembler();
			dto.DatiAnagraficiCessionario = datiAnagraficiCessionarioAssembler.Assemble(entity.DatiAnagraficiCessionario);

	    }
	
	    public override void AssembleCollections(Anagrafica entity, AnagraficaDto dto)
	    {
	    }
	
	}
	
	
	public partial class AnagraficaAssembler : AnagraficaAssemblerBase, IAnagraficaAssembler
	{
	    
	}
	
	public partial interface IAccountAssembler : IAssembler<AccountDto, Account>
	{ 
	
	}
	
	public partial class AccountAssemblerBase : Assembler<AccountDto, Account>
	{
		/// <summary>
	    /// Invoked after the AccountDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AccountDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AccountDto dto);
	
		/// <summary>
	    /// Invoked after the Account instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Account"/> instance.</param>
		partial void OnEntityAssembled(Account entity);
		
	    public override Account Assemble(Account entity, AccountDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Account();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.Username = dto.Username;
			entity.Password = dto.Password;
			entity.Nickname = dto.Nickname;
			entity.Ruolo = dto.Ruolo;
			entity.Note = dto.Note;
			entity.Creazione = dto.Creazione;
			entity.Abilitato = dto.Abilitato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AccountDto Assemble(Account entity)
	    {
	        AccountDto dto = new AccountDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.Username = entity.Username;
			dto.Password = entity.Password;
			dto.Nickname = entity.Nickname;
			dto.Ruolo = entity.Ruolo;
			dto.Note = entity.Note;
			dto.Creazione = entity.Creazione;
			dto.Abilitato = entity.Abilitato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Account entity, AccountDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Account entity, AccountDto dto)
	    {
	    }
	
	}
	
	
	public partial class AccountAssembler : AccountAssemblerBase, IAccountAssembler
	{
	    
	}
	
	public partial interface ICessionarioCommittenteAssembler : IAssembler<CessionarioCommittenteDto, CessionarioCommittente>
	{ 
	
	}
	
	public partial class CessionarioCommittenteAssemblerBase : Assembler<CessionarioCommittenteDto, CessionarioCommittente>
	{
		/// <summary>
	    /// Invoked after the CessionarioCommittenteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CessionarioCommittenteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CessionarioCommittenteDto dto);
	
		/// <summary>
	    /// Invoked after the CessionarioCommittente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="CessionarioCommittente"/> instance.</param>
		partial void OnEntityAssembled(CessionarioCommittente entity);
		
	    public override CessionarioCommittente Assemble(CessionarioCommittente entity, CessionarioCommittenteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new CessionarioCommittente();
	        }
			
			entity.Id = dto.Id;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CessionarioCommittenteDto Assemble(CessionarioCommittente entity)
	    {
	        CessionarioCommittenteDto dto = new CessionarioCommittenteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(CessionarioCommittente entity, CessionarioCommittenteDto dto)
	    {
			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

			DatiAnagraficiCessionarioAssembler datiAnagraficiCessionarioAssembler = new DatiAnagraficiCessionarioAssembler();
			dto.DatiAnagraficiCessionario = datiAnagraficiCessionarioAssembler.Assemble(entity.DatiAnagraficiCessionario);

	    }
	
	    public override void AssembleCollections(CessionarioCommittente entity, CessionarioCommittenteDto dto)
	    {
			SedeAssembler sedeAssembler = new SedeAssembler();

			dto.Sedes = new List<SedeDto>();
			foreach (Sede item in entity.Sedes)
			{
				var dtoItem = sedeAssembler.Assemble(item);
				dtoItem.CessionarioCommittente = dto;
				dto.Sedes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CessionarioCommittenteAssembler : CessionarioCommittenteAssemblerBase, ICessionarioCommittenteAssembler
	{
	    
	}
	
	public partial interface IDatiGeneraliAssembler : IAssembler<DatiGeneraliDto, DatiGenerali>
	{ 
	
	}
	
	public partial class DatiGeneraliAssemblerBase : Assembler<DatiGeneraliDto, DatiGenerali>
	{
		/// <summary>
	    /// Invoked after the DatiGeneraliDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiGeneraliDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiGeneraliDto dto);
	
		/// <summary>
	    /// Invoked after the DatiGenerali instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiGenerali"/> instance.</param>
		partial void OnEntityAssembled(DatiGenerali entity);
		
	    public override DatiGenerali Assemble(DatiGenerali entity, DatiGeneraliDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiGenerali();
	        }
			
			entity.Id = dto.Id;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiGeneraliDto Assemble(DatiGenerali entity)
	    {
	        DatiGeneraliDto dto = new DatiGeneraliDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiGenerali entity, DatiGeneraliDto dto)
	    {
			FatturaElettronicaBodyAssembler fatturaElettronicaBodyAssembler = new FatturaElettronicaBodyAssembler();
			dto.FatturaElettronicaBody = fatturaElettronicaBodyAssembler.Assemble(entity.FatturaElettronicaBody);

			DatiGeneraliDocumentoAssembler datiGeneraliDocumentoAssembler = new DatiGeneraliDocumentoAssembler();
			dto.DatiGeneraliDocumento = datiGeneraliDocumentoAssembler.Assemble(entity.DatiGeneraliDocumento);

	    }
	
	    public override void AssembleCollections(DatiGenerali entity, DatiGeneraliDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiGeneraliAssembler : DatiGeneraliAssemblerBase, IDatiGeneraliAssembler
	{
	    
	}
	
	public partial interface IDatiGeneraliDocumentoAssembler : IAssembler<DatiGeneraliDocumentoDto, DatiGeneraliDocumento>
	{ 
	
	}
	
	public partial class DatiGeneraliDocumentoAssemblerBase : Assembler<DatiGeneraliDocumentoDto, DatiGeneraliDocumento>
	{
		/// <summary>
	    /// Invoked after the DatiGeneraliDocumentoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiGeneraliDocumentoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiGeneraliDocumentoDto dto);
	
		/// <summary>
	    /// Invoked after the DatiGeneraliDocumento instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiGeneraliDocumento"/> instance.</param>
		partial void OnEntityAssembled(DatiGeneraliDocumento entity);
		
	    public override DatiGeneraliDocumento Assemble(DatiGeneraliDocumento entity, DatiGeneraliDocumentoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiGeneraliDocumento();
	        }
			
			entity.Id = dto.Id;
			entity.TipoDocumento = dto.TipoDocumento;
			entity.Divisa = dto.Divisa;
			entity.Data = dto.Data;
			entity.Numero = dto.Numero;
			entity.ImportotTotaleDocumento = dto.ImportotTotaleDocumento;
			entity.Arrotondamento = dto.Arrotondamento;
			entity.Causale = dto.Causale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiGeneraliDocumentoDto Assemble(DatiGeneraliDocumento entity)
	    {
	        DatiGeneraliDocumentoDto dto = new DatiGeneraliDocumentoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.TipoDocumento = entity.TipoDocumento;
			dto.Divisa = entity.Divisa;
			dto.Data = entity.Data;
			dto.Numero = entity.Numero;
			dto.ImportotTotaleDocumento = entity.ImportotTotaleDocumento;
			dto.Arrotondamento = entity.Arrotondamento;
			dto.Causale = entity.Causale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiGeneraliDocumento entity, DatiGeneraliDocumentoDto dto)
	    {
			DatiGeneraliAssembler datiGeneraliAssembler = new DatiGeneraliAssembler();
			dto.DatiGenerali = datiGeneraliAssembler.Assemble(entity.DatiGenerali);

			DatiRitenutaAssembler datiRitenutaAssembler = new DatiRitenutaAssembler();
			dto.DatiRitenuta = datiRitenutaAssembler.Assemble(entity.DatiRitenuta);

			DatiBolloAssembler datiBolloAssembler = new DatiBolloAssembler();
			dto.DatiBollo = datiBolloAssembler.Assemble(entity.DatiBollo);

	    }
	
	    public override void AssembleCollections(DatiGeneraliDocumento entity, DatiGeneraliDocumentoDto dto)
	    {
			DatiCassaPrevidenzialeAssembler datiCassaPrevidenzialeAssembler = new DatiCassaPrevidenzialeAssembler();

			dto.DatiCassaPrevidenziales = new List<DatiCassaPrevidenzialeDto>();
			foreach (DatiCassaPrevidenziale item in entity.DatiCassaPrevidenziales)
			{
				var dtoItem = datiCassaPrevidenzialeAssembler.Assemble(item);
				dtoItem.DatiGeneraliDocumento = dto;
				dto.DatiCassaPrevidenziales.Add(dtoItem);
			}

			ScontoMaggiorazioneAssembler scontoMaggiorazioneAssembler = new ScontoMaggiorazioneAssembler();

			dto.ScontoMaggioraziones = new List<ScontoMaggiorazioneDto>();
			foreach (ScontoMaggiorazione item in entity.ScontoMaggioraziones)
			{
				var dtoItem = scontoMaggiorazioneAssembler.Assemble(item);
				dtoItem.DatiGeneraliDocumento = dto;
				dto.ScontoMaggioraziones.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiGeneraliDocumentoAssembler : DatiGeneraliDocumentoAssemblerBase, IDatiGeneraliDocumentoAssembler
	{
	    
	}
	
	public partial interface IDatiRitenutaAssembler : IAssembler<DatiRitenutaDto, DatiRitenuta>
	{ 
	
	}
	
	public partial class DatiRitenutaAssemblerBase : Assembler<DatiRitenutaDto, DatiRitenuta>
	{
		/// <summary>
	    /// Invoked after the DatiRitenutaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiRitenutaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiRitenutaDto dto);
	
		/// <summary>
	    /// Invoked after the DatiRitenuta instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiRitenuta"/> instance.</param>
		partial void OnEntityAssembled(DatiRitenuta entity);
		
	    public override DatiRitenuta Assemble(DatiRitenuta entity, DatiRitenutaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiRitenuta();
	        }
			
			entity.Id = dto.Id;
			entity.TipoRitenuta = dto.TipoRitenuta;
			entity.ImportoRitenuta = dto.ImportoRitenuta;
			entity.AliquotaRitenuta = dto.AliquotaRitenuta;
			entity.CausalePAgamento = dto.CausalePAgamento;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiRitenutaDto Assemble(DatiRitenuta entity)
	    {
	        DatiRitenutaDto dto = new DatiRitenutaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.TipoRitenuta = entity.TipoRitenuta;
			dto.ImportoRitenuta = entity.ImportoRitenuta;
			dto.AliquotaRitenuta = entity.AliquotaRitenuta;
			dto.CausalePAgamento = entity.CausalePAgamento;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiRitenuta entity, DatiRitenutaDto dto)
	    {
			DatiGeneraliDocumentoAssembler datiGeneraliDocumentoAssembler = new DatiGeneraliDocumentoAssembler();
			dto.DatiGeneraliDocumento = datiGeneraliDocumentoAssembler.Assemble(entity.DatiGeneraliDocumento);

	    }
	
	    public override void AssembleCollections(DatiRitenuta entity, DatiRitenutaDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiRitenutaAssembler : DatiRitenutaAssemblerBase, IDatiRitenutaAssembler
	{
	    
	}
	
	public partial interface IDatiBeniServiziAssembler : IAssembler<DatiBeniServiziDto, DatiBeniServizi>
	{ 
	
	}
	
	public partial class DatiBeniServiziAssemblerBase : Assembler<DatiBeniServiziDto, DatiBeniServizi>
	{
		/// <summary>
	    /// Invoked after the DatiBeniServiziDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiBeniServiziDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiBeniServiziDto dto);
	
		/// <summary>
	    /// Invoked after the DatiBeniServizi instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiBeniServizi"/> instance.</param>
		partial void OnEntityAssembled(DatiBeniServizi entity);
		
	    public override DatiBeniServizi Assemble(DatiBeniServizi entity, DatiBeniServiziDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiBeniServizi();
	        }
			
			entity.Id = dto.Id;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiBeniServiziDto Assemble(DatiBeniServizi entity)
	    {
	        DatiBeniServiziDto dto = new DatiBeniServiziDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiBeniServizi entity, DatiBeniServiziDto dto)
	    {
			FatturaElettronicaBodyAssembler fatturaElettronicaBodyAssembler = new FatturaElettronicaBodyAssembler();
			dto.FatturaElettronicaBody = fatturaElettronicaBodyAssembler.Assemble(entity.FatturaElettronicaBody);

	    }
	
	    public override void AssembleCollections(DatiBeniServizi entity, DatiBeniServiziDto dto)
	    {
			DettaglioLineeAssembler dettaglioLineeAssembler = new DettaglioLineeAssembler();

			dto.DettaglioLinees = new List<DettaglioLineeDto>();
			foreach (DettaglioLinee item in entity.DettaglioLinees)
			{
				var dtoItem = dettaglioLineeAssembler.Assemble(item);
				dtoItem.DatiBeniServizi = dto;
				dto.DettaglioLinees.Add(dtoItem);
			}

			DatiRiepilogoAssembler datiRiepilogoAssembler = new DatiRiepilogoAssembler();

			dto.DatiRiepilogos = new List<DatiRiepilogoDto>();
			foreach (DatiRiepilogo item in entity.DatiRiepilogos)
			{
				var dtoItem = datiRiepilogoAssembler.Assemble(item);
				dtoItem.DatiBeniServizi = dto;
				dto.DatiRiepilogos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiBeniServiziAssembler : DatiBeniServiziAssemblerBase, IDatiBeniServiziAssembler
	{
	    
	}
	
	public partial interface IDettaglioLineeAssembler : IAssembler<DettaglioLineeDto, DettaglioLinee>
	{ 
	
	}
	
	public partial class DettaglioLineeAssemblerBase : Assembler<DettaglioLineeDto, DettaglioLinee>
	{
		/// <summary>
	    /// Invoked after the DettaglioLineeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DettaglioLineeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DettaglioLineeDto dto);
	
		/// <summary>
	    /// Invoked after the DettaglioLinee instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DettaglioLinee"/> instance.</param>
		partial void OnEntityAssembled(DettaglioLinee entity);
		
	    public override DettaglioLinee Assemble(DettaglioLinee entity, DettaglioLineeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DettaglioLinee();
	        }
			
			entity.Id = dto.Id;
			entity.DatiBeniServiziId = dto.DatiBeniServiziId;
			entity.NumeroLinea = dto.NumeroLinea;
			entity.Descrizione = dto.Descrizione;
			entity.PrezzoUnitario = dto.PrezzoUnitario;
			entity.PrezzoTotale = dto.PrezzoTotale;
			entity.AliquotaIVA = dto.AliquotaIVA;
			entity.Ritenuta = dto.Ritenuta;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DettaglioLineeDto Assemble(DettaglioLinee entity)
	    {
	        DettaglioLineeDto dto = new DettaglioLineeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.DatiBeniServiziId = entity.DatiBeniServiziId;
			dto.NumeroLinea = entity.NumeroLinea;
			dto.Descrizione = entity.Descrizione;
			dto.PrezzoUnitario = entity.PrezzoUnitario;
			dto.PrezzoTotale = entity.PrezzoTotale;
			dto.AliquotaIVA = entity.AliquotaIVA;
			dto.Ritenuta = entity.Ritenuta;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DettaglioLinee entity, DettaglioLineeDto dto)
	    {
			DatiBeniServiziAssembler datiBeniServiziAssembler = new DatiBeniServiziAssembler();
			dto.DatiBeniServizi = datiBeniServiziAssembler.Assemble(entity.DatiBeniServizi);

	    }
	
	    public override void AssembleCollections(DettaglioLinee entity, DettaglioLineeDto dto)
	    {
	    }
	
	}
	
	
	public partial class DettaglioLineeAssembler : DettaglioLineeAssemblerBase, IDettaglioLineeAssembler
	{
	    
	}
	
	public partial interface IDatiRiepilogoAssembler : IAssembler<DatiRiepilogoDto, DatiRiepilogo>
	{ 
	
	}
	
	public partial class DatiRiepilogoAssemblerBase : Assembler<DatiRiepilogoDto, DatiRiepilogo>
	{
		/// <summary>
	    /// Invoked after the DatiRiepilogoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiRiepilogoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiRiepilogoDto dto);
	
		/// <summary>
	    /// Invoked after the DatiRiepilogo instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiRiepilogo"/> instance.</param>
		partial void OnEntityAssembled(DatiRiepilogo entity);
		
	    public override DatiRiepilogo Assemble(DatiRiepilogo entity, DatiRiepilogoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiRiepilogo();
	        }
			
			entity.Id = dto.Id;
			entity.DatiBeniServiziId = dto.DatiBeniServiziId;
			entity.AliquotaIVA = dto.AliquotaIVA;
			entity.ImponibileImporto = dto.ImponibileImporto;
			entity.Imposta = dto.Imposta;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiRiepilogoDto Assemble(DatiRiepilogo entity)
	    {
	        DatiRiepilogoDto dto = new DatiRiepilogoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.DatiBeniServiziId = entity.DatiBeniServiziId;
			dto.AliquotaIVA = entity.AliquotaIVA;
			dto.ImponibileImporto = entity.ImponibileImporto;
			dto.Imposta = entity.Imposta;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiRiepilogo entity, DatiRiepilogoDto dto)
	    {
			DatiBeniServiziAssembler datiBeniServiziAssembler = new DatiBeniServiziAssembler();
			dto.DatiBeniServizi = datiBeniServiziAssembler.Assemble(entity.DatiBeniServizi);

	    }
	
	    public override void AssembleCollections(DatiRiepilogo entity, DatiRiepilogoDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiRiepilogoAssembler : DatiRiepilogoAssemblerBase, IDatiRiepilogoAssembler
	{
	    
	}
	
	public partial interface IDatiPagamentoAssembler : IAssembler<DatiPagamentoDto, DatiPagamento>
	{ 
	
	}
	
	public partial class DatiPagamentoAssemblerBase : Assembler<DatiPagamentoDto, DatiPagamento>
	{
		/// <summary>
	    /// Invoked after the DatiPagamentoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiPagamentoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiPagamentoDto dto);
	
		/// <summary>
	    /// Invoked after the DatiPagamento instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiPagamento"/> instance.</param>
		partial void OnEntityAssembled(DatiPagamento entity);
		
	    public override DatiPagamento Assemble(DatiPagamento entity, DatiPagamentoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiPagamento();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaElettronicaBodyId = dto.FatturaElettronicaBodyId;
			entity.CondizioniPagamento = dto.CondizioniPagamento;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiPagamentoDto Assemble(DatiPagamento entity)
	    {
	        DatiPagamentoDto dto = new DatiPagamentoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaElettronicaBodyId = entity.FatturaElettronicaBodyId;
			dto.CondizioniPagamento = entity.CondizioniPagamento;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiPagamento entity, DatiPagamentoDto dto)
	    {
			FatturaElettronicaBodyAssembler fatturaElettronicaBodyAssembler = new FatturaElettronicaBodyAssembler();
			dto.FatturaElettronicaBody = fatturaElettronicaBodyAssembler.Assemble(entity.FatturaElettronicaBody);

	    }
	
	    public override void AssembleCollections(DatiPagamento entity, DatiPagamentoDto dto)
	    {
			DettaglioPagamentoAssembler dettaglioPagamentoAssembler = new DettaglioPagamentoAssembler();

			dto.DettaglioPagamentos = new List<DettaglioPagamentoDto>();
			foreach (DettaglioPagamento item in entity.DettaglioPagamentos)
			{
				var dtoItem = dettaglioPagamentoAssembler.Assemble(item);
				dtoItem.DatiPagamento = dto;
				dto.DettaglioPagamentos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiPagamentoAssembler : DatiPagamentoAssemblerBase, IDatiPagamentoAssembler
	{
	    
	}
	
	public partial interface IDettaglioPagamentoAssembler : IAssembler<DettaglioPagamentoDto, DettaglioPagamento>
	{ 
	
	}
	
	public partial class DettaglioPagamentoAssemblerBase : Assembler<DettaglioPagamentoDto, DettaglioPagamento>
	{
		/// <summary>
	    /// Invoked after the DettaglioPagamentoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DettaglioPagamentoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DettaglioPagamentoDto dto);
	
		/// <summary>
	    /// Invoked after the DettaglioPagamento instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DettaglioPagamento"/> instance.</param>
		partial void OnEntityAssembled(DettaglioPagamento entity);
		
	    public override DettaglioPagamento Assemble(DettaglioPagamento entity, DettaglioPagamentoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DettaglioPagamento();
	        }
			
			entity.Id = dto.Id;
			entity.DatiPagamentoId = dto.DatiPagamentoId;
			entity.Beneficiario = dto.Beneficiario;
			entity.ModalitaPagamento = dto.ModalitaPagamento;
			entity.DataRiferimentoTerminiPagamento = dto.DataRiferimentoTerminiPagamento;
			entity.GiorniTerminiPagamento = dto.GiorniTerminiPagamento;
			entity.DataScadenzaPagamento = dto.DataScadenzaPagamento;
			entity.ImportoPagamento = dto.ImportoPagamento;
			entity.IBAN = dto.IBAN;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DettaglioPagamentoDto Assemble(DettaglioPagamento entity)
	    {
	        DettaglioPagamentoDto dto = new DettaglioPagamentoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.DatiPagamentoId = entity.DatiPagamentoId;
			dto.Beneficiario = entity.Beneficiario;
			dto.ModalitaPagamento = entity.ModalitaPagamento;
			dto.DataRiferimentoTerminiPagamento = entity.DataRiferimentoTerminiPagamento;
			dto.GiorniTerminiPagamento = entity.GiorniTerminiPagamento;
			dto.DataScadenzaPagamento = entity.DataScadenzaPagamento;
			dto.ImportoPagamento = entity.ImportoPagamento;
			dto.IBAN = entity.IBAN;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DettaglioPagamento entity, DettaglioPagamentoDto dto)
	    {
			DatiPagamentoAssembler datiPagamentoAssembler = new DatiPagamentoAssembler();
			dto.DatiPagamento = datiPagamentoAssembler.Assemble(entity.DatiPagamento);

	    }
	
	    public override void AssembleCollections(DettaglioPagamento entity, DettaglioPagamentoDto dto)
	    {
	    }
	
	}
	
	
	public partial class DettaglioPagamentoAssembler : DettaglioPagamentoAssemblerBase, IDettaglioPagamentoAssembler
	{
	    
	}
	
	public partial interface ISedeAssembler : IAssembler<SedeDto, Sede>
	{ 
	
	}
	
	public partial class SedeAssemblerBase : Assembler<SedeDto, Sede>
	{
		/// <summary>
	    /// Invoked after the SedeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SedeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SedeDto dto);
	
		/// <summary>
	    /// Invoked after the Sede instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Sede"/> instance.</param>
		partial void OnEntityAssembled(Sede entity);
		
	    public override Sede Assemble(Sede entity, SedeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Sede();
	        }
			
			entity.Id = dto.Id;
			entity.CedentePrestatoreId = dto.CedentePrestatoreId;
			entity.CessionarioCommittenteId = dto.CessionarioCommittenteId;
			entity.Indirizzo = dto.Indirizzo;
			entity.NumeroCivico = dto.NumeroCivico;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Nazione = dto.Nazione;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SedeDto Assemble(Sede entity)
	    {
	        SedeDto dto = new SedeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CedentePrestatoreId = entity.CedentePrestatoreId;
			dto.CessionarioCommittenteId = entity.CessionarioCommittenteId;
			dto.Indirizzo = entity.Indirizzo;
			dto.NumeroCivico = entity.NumeroCivico;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Nazione = entity.Nazione;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Sede entity, SedeDto dto)
	    {
			CedentePrestatoreAssembler cedentePrestatoreAssembler = new CedentePrestatoreAssembler();
			dto.CedentePrestatore = cedentePrestatoreAssembler.Assemble(entity.CedentePrestatore);

			CessionarioCommittenteAssembler cessionarioCommittenteAssembler = new CessionarioCommittenteAssembler();
			dto.CessionarioCommittente = cessionarioCommittenteAssembler.Assemble(entity.CessionarioCommittente);

	    }
	
	    public override void AssembleCollections(Sede entity, SedeDto dto)
	    {
	    }
	
	}
	
	
	public partial class SedeAssembler : SedeAssemblerBase, ISedeAssembler
	{
	    
	}
	
	public partial interface IDatiAnagraficiCessionarioAssembler : IAssembler<DatiAnagraficiCessionarioDto, DatiAnagraficiCessionario>
	{ 
	
	}
	
	public partial class DatiAnagraficiCessionarioAssemblerBase : Assembler<DatiAnagraficiCessionarioDto, DatiAnagraficiCessionario>
	{
		/// <summary>
	    /// Invoked after the DatiAnagraficiCessionarioDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiAnagraficiCessionarioDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiAnagraficiCessionarioDto dto);
	
		/// <summary>
	    /// Invoked after the DatiAnagraficiCessionario instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiAnagraficiCessionario"/> instance.</param>
		partial void OnEntityAssembled(DatiAnagraficiCessionario entity);
		
	    public override DatiAnagraficiCessionario Assemble(DatiAnagraficiCessionario entity, DatiAnagraficiCessionarioDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiAnagraficiCessionario();
	        }
			
			entity.Id = dto.Id;
			entity.CodiceFiscale = dto.CodiceFiscale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiAnagraficiCessionarioDto Assemble(DatiAnagraficiCessionario entity)
	    {
	        DatiAnagraficiCessionarioDto dto = new DatiAnagraficiCessionarioDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CodiceFiscale = entity.CodiceFiscale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiAnagraficiCessionario entity, DatiAnagraficiCessionarioDto dto)
	    {
			CessionarioCommittenteAssembler cessionarioCommittenteAssembler = new CessionarioCommittenteAssembler();
			dto.CessionarioCommittente = cessionarioCommittenteAssembler.Assemble(entity.CessionarioCommittente);

	    }
	
	    public override void AssembleCollections(DatiAnagraficiCessionario entity, DatiAnagraficiCessionarioDto dto)
	    {
			IdFiscaleAssembler idFiscaleAssembler = new IdFiscaleAssembler();

			dto.IdFiscales = new List<IdFiscaleDto>();
			foreach (IdFiscale item in entity.IdFiscales)
			{
				var dtoItem = idFiscaleAssembler.Assemble(item);
				dtoItem.DatiAnagraficiCessionario = dto;
				dto.IdFiscales.Add(dtoItem);
			}

			AnagraficaAssembler anagraficaAssembler = new AnagraficaAssembler();

			dto.Anagraficas = new List<AnagraficaDto>();
			foreach (Anagrafica item in entity.Anagraficas)
			{
				var dtoItem = anagraficaAssembler.Assemble(item);
				dtoItem.DatiAnagraficiCessionario = dto;
				dto.Anagraficas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DatiAnagraficiCessionarioAssembler : DatiAnagraficiCessionarioAssemblerBase, IDatiAnagraficiCessionarioAssembler
	{
	    
	}
	
	public partial interface IDatiBolloAssembler : IAssembler<DatiBolloDto, DatiBollo>
	{ 
	
	}
	
	public partial class DatiBolloAssemblerBase : Assembler<DatiBolloDto, DatiBollo>
	{
		/// <summary>
	    /// Invoked after the DatiBolloDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiBolloDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiBolloDto dto);
	
		/// <summary>
	    /// Invoked after the DatiBollo instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiBollo"/> instance.</param>
		partial void OnEntityAssembled(DatiBollo entity);
		
	    public override DatiBollo Assemble(DatiBollo entity, DatiBolloDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiBollo();
	        }
			
			entity.Id = dto.Id;
			entity.BolloVirtuale = dto.BolloVirtuale;
			entity.ImportoBollo = dto.ImportoBollo;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiBolloDto Assemble(DatiBollo entity)
	    {
	        DatiBolloDto dto = new DatiBolloDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.BolloVirtuale = entity.BolloVirtuale;
			dto.ImportoBollo = entity.ImportoBollo;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiBollo entity, DatiBolloDto dto)
	    {
			DatiGeneraliDocumentoAssembler datiGeneraliDocumentoAssembler = new DatiGeneraliDocumentoAssembler();
			dto.DatiGeneraliDocumento = datiGeneraliDocumentoAssembler.Assemble(entity.DatiGeneraliDocumento);

	    }
	
	    public override void AssembleCollections(DatiBollo entity, DatiBolloDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiBolloAssembler : DatiBolloAssemblerBase, IDatiBolloAssembler
	{
	    
	}
	
	public partial interface IDatiCassaPrevidenzialeAssembler : IAssembler<DatiCassaPrevidenzialeDto, DatiCassaPrevidenziale>
	{ 
	
	}
	
	public partial class DatiCassaPrevidenzialeAssemblerBase : Assembler<DatiCassaPrevidenzialeDto, DatiCassaPrevidenziale>
	{
		/// <summary>
	    /// Invoked after the DatiCassaPrevidenzialeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiCassaPrevidenzialeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiCassaPrevidenzialeDto dto);
	
		/// <summary>
	    /// Invoked after the DatiCassaPrevidenziale instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiCassaPrevidenziale"/> instance.</param>
		partial void OnEntityAssembled(DatiCassaPrevidenziale entity);
		
	    public override DatiCassaPrevidenziale Assemble(DatiCassaPrevidenziale entity, DatiCassaPrevidenzialeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiCassaPrevidenziale();
	        }
			
			entity.Id = dto.Id;
			entity.DatiGeneraliDocumentoId = dto.DatiGeneraliDocumentoId;
			entity.TipoCassa = dto.TipoCassa;
			entity.AlCassa = dto.AlCassa;
			entity.ImportoContributoCassa = dto.ImportoContributoCassa;
			entity.ImponibileCassa = dto.ImponibileCassa;
			entity.AliquotaIVA = dto.AliquotaIVA;
			entity.Ritenuta = dto.Ritenuta;
			entity.Natura = dto.Natura;
			entity.RiferimentoAmministrazione = dto.RiferimentoAmministrazione;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiCassaPrevidenzialeDto Assemble(DatiCassaPrevidenziale entity)
	    {
	        DatiCassaPrevidenzialeDto dto = new DatiCassaPrevidenzialeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.DatiGeneraliDocumentoId = entity.DatiGeneraliDocumentoId;
			dto.TipoCassa = entity.TipoCassa;
			dto.AlCassa = entity.AlCassa;
			dto.ImportoContributoCassa = entity.ImportoContributoCassa;
			dto.ImponibileCassa = entity.ImponibileCassa;
			dto.AliquotaIVA = entity.AliquotaIVA;
			dto.Ritenuta = entity.Ritenuta;
			dto.Natura = entity.Natura;
			dto.RiferimentoAmministrazione = entity.RiferimentoAmministrazione;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiCassaPrevidenziale entity, DatiCassaPrevidenzialeDto dto)
	    {
			DatiGeneraliDocumentoAssembler datiGeneraliDocumentoAssembler = new DatiGeneraliDocumentoAssembler();
			dto.DatiGeneraliDocumento = datiGeneraliDocumentoAssembler.Assemble(entity.DatiGeneraliDocumento);

	    }
	
	    public override void AssembleCollections(DatiCassaPrevidenziale entity, DatiCassaPrevidenzialeDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiCassaPrevidenzialeAssembler : DatiCassaPrevidenzialeAssemblerBase, IDatiCassaPrevidenzialeAssembler
	{
	    
	}
	
	public partial interface IScontoMaggiorazioneAssembler : IAssembler<ScontoMaggiorazioneDto, ScontoMaggiorazione>
	{ 
	
	}
	
	public partial class ScontoMaggiorazioneAssemblerBase : Assembler<ScontoMaggiorazioneDto, ScontoMaggiorazione>
	{
		/// <summary>
	    /// Invoked after the ScontoMaggiorazioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ScontoMaggiorazioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ScontoMaggiorazioneDto dto);
	
		/// <summary>
	    /// Invoked after the ScontoMaggiorazione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="ScontoMaggiorazione"/> instance.</param>
		partial void OnEntityAssembled(ScontoMaggiorazione entity);
		
	    public override ScontoMaggiorazione Assemble(ScontoMaggiorazione entity, ScontoMaggiorazioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new ScontoMaggiorazione();
	        }
			
			entity.Id = dto.Id;
			entity.DatiGeneraliDocumentoId = dto.DatiGeneraliDocumentoId;
			entity.Tipo = dto.Tipo;
			entity.Percentuale = dto.Percentuale;
			entity.Importo = dto.Importo;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ScontoMaggiorazioneDto Assemble(ScontoMaggiorazione entity)
	    {
	        ScontoMaggiorazioneDto dto = new ScontoMaggiorazioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.DatiGeneraliDocumentoId = entity.DatiGeneraliDocumentoId;
			dto.Tipo = entity.Tipo;
			dto.Percentuale = entity.Percentuale;
			dto.Importo = entity.Importo;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(ScontoMaggiorazione entity, ScontoMaggiorazioneDto dto)
	    {
			DatiGeneraliDocumentoAssembler datiGeneraliDocumentoAssembler = new DatiGeneraliDocumentoAssembler();
			dto.DatiGeneraliDocumento = datiGeneraliDocumentoAssembler.Assemble(entity.DatiGeneraliDocumento);

	    }
	
	    public override void AssembleCollections(ScontoMaggiorazione entity, ScontoMaggiorazioneDto dto)
	    {
	    }
	
	}
	
	
	public partial class ScontoMaggiorazioneAssembler : ScontoMaggiorazioneAssemblerBase, IScontoMaggiorazioneAssembler
	{
	    
	}
}
#pragma warning restore 1591
