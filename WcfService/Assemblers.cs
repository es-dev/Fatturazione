#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WcfService.Assemblers
{
	using Telerik.OpenAccess;
	using WcfService.Dto;
	using WcfService.Converters;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IAziendaAssembler : IAssembler<AziendaDto, Azienda>
	{ 
	
	}
	
	public partial class AziendaAssemblerBase : Assembler<AziendaDto, Azienda>
	{
		/// <summary>
	    /// Invoked after the AziendaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AziendaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AziendaDto dto);
	
		/// <summary>
	    /// Invoked after the Azienda instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Azienda"/> instance.</param>
		partial void OnEntityAssembled(Azienda entity);
		
	    public override Azienda Assemble(Azienda entity, AziendaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Azienda();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.PartitaIva = dto.PartitaIva;
			entity.Telefono = dto.Telefono;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.PEC = dto.PEC;
			entity.Codice = dto.Codice;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AziendaDto Assemble(Azienda entity)
	    {
	        AziendaDto dto = new AziendaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.PartitaIva = entity.PartitaIva;
			dto.Telefono = entity.Telefono;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.PEC = entity.PEC;
			dto.Codice = entity.Codice;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Azienda entity, AziendaDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Azienda entity, AziendaDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Clientes.Add(dtoItem);
			}

			AnagraficaClienteAssembler anagraficaClienteAssembler = new AnagraficaClienteAssembler();

			dto.AnagraficaClientes = new List<AnagraficaClienteDto>();
			foreach (AnagraficaCliente item in entity.AnagraficaClientes)
			{
				var dtoItem = anagraficaClienteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.AnagraficaClientes.Add(dtoItem);
			}

			SocioAssembler socioAssembler = new SocioAssembler();

			dto.Socios = new List<SocioDto>();
			foreach (Socio item in entity.Socios)
			{
				var dtoItem = socioAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Socios.Add(dtoItem);
			}

			AccountAssembler accountAssembler = new AccountAssembler();

			dto.Accounts = new List<AccountDto>();
			foreach (Account item in entity.Accounts)
			{
				var dtoItem = accountAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Accounts.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AziendaAssembler : AziendaAssemblerBase, IAziendaAssembler
	{
	    
	}
	
	public partial interface IClienteAssembler : IAssembler<ClienteDto, Cliente>
	{ 
	
	}
	
	public partial class ClienteAssemblerBase : Assembler<ClienteDto, Cliente>
	{
		/// <summary>
	    /// Invoked after the ClienteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ClienteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ClienteDto dto);
	
		/// <summary>
	    /// Invoked after the Cliente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Cliente"/> instance.</param>
		partial void OnEntityAssembled(Cliente entity);
		
	    public override Cliente Assemble(Cliente entity, ClienteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Cliente();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.AnagraficaClienteId = dto.AnagraficaClienteId;
			entity.AnagraficaPAId = dto.AnagraficaPAId;
			entity.Tipo = dto.Tipo;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ClienteDto Assemble(Cliente entity)
	    {
	        ClienteDto dto = new ClienteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.AnagraficaClienteId = entity.AnagraficaClienteId;
			dto.AnagraficaPAId = entity.AnagraficaPAId;
			dto.Tipo = entity.Tipo;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Cliente entity, ClienteDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

			AnagraficaClienteAssembler anagraficaClienteAssembler = new AnagraficaClienteAssembler();
			dto.AnagraficaCliente = anagraficaClienteAssembler.Assemble(entity.AnagraficaCliente);

			AnagraficaPAAssembler anagraficaPAAssembler = new AnagraficaPAAssembler();
			dto.AnagraficaPA = anagraficaPAAssembler.Assemble(entity.AnagraficaPA);

	    }
	
	    public override void AssembleCollections(Cliente entity, ClienteDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();

			dto.Fatturas = new List<FatturaDto>();
			foreach (Fattura item in entity.Fatturas)
			{
				var dtoItem = fatturaAssembler.Assemble(item);
				dtoItem.Cliente = dto;
				dto.Fatturas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ClienteAssembler : ClienteAssemblerBase, IClienteAssembler
	{
	    
	}
	
	public partial interface IFatturaAssembler : IAssembler<FatturaDto, Fattura>
	{ 
	
	}
	
	public partial class FatturaAssemblerBase : Assembler<FatturaDto, Fattura>
	{
		/// <summary>
	    /// Invoked after the FatturaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaDto dto);
	
		/// <summary>
	    /// Invoked after the Fattura instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Fattura"/> instance.</param>
		partial void OnEntityAssembled(Fattura entity);
		
	    public override Fattura Assemble(Fattura entity, FatturaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Fattura();
	        }
			
			entity.Id = dto.Id;
			entity.ClienteId = dto.ClienteId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaDto Assemble(Fattura entity)
	    {
	        FatturaDto dto = new FatturaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ClienteId = entity.ClienteId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Fattura entity, FatturaDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();
			dto.Cliente = clienteAssembler.Assemble(entity.Cliente);

			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

			FatturaElettronicaBodyAssembler fatturaElettronicaBodyAssembler = new FatturaElettronicaBodyAssembler();
			dto.FatturaElettronicaBody = fatturaElettronicaBodyAssembler.Assemble(entity.FatturaElettronicaBody);

	    }
	
	    public override void AssembleCollections(Fattura entity, FatturaDto dto)
	    {
			TrasmissioneAssembler trasmissioneAssembler = new TrasmissioneAssembler();

			dto.Trasmissiones = new List<TrasmissioneDto>();
			foreach (Trasmissione item in entity.Trasmissiones)
			{
				var dtoItem = trasmissioneAssembler.Assemble(item);
				dtoItem.Fattura = dto;
				dto.Trasmissiones.Add(dtoItem);
			}

			IncassoAssembler incassoAssembler = new IncassoAssembler();

			dto.Incassos = new List<IncassoDto>();
			foreach (Incasso item in entity.Incassos)
			{
				var dtoItem = incassoAssembler.Assemble(item);
				dtoItem.Fattura = dto;
				dto.Incassos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FatturaAssembler : FatturaAssemblerBase, IFatturaAssembler
	{
	    
	}
	
	public partial interface ITrasmissioneAssembler : IAssembler<TrasmissioneDto, Trasmissione>
	{ 
	
	}
	
	public partial class TrasmissioneAssemblerBase : Assembler<TrasmissioneDto, Trasmissione>
	{
		/// <summary>
	    /// Invoked after the TrasmissioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="TrasmissioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(TrasmissioneDto dto);
	
		/// <summary>
	    /// Invoked after the Trasmissione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Trasmissione"/> instance.</param>
		partial void OnEntityAssembled(Trasmissione entity);
		
	    public override Trasmissione Assemble(Trasmissione entity, TrasmissioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Trasmissione();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaId = dto.FatturaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override TrasmissioneDto Assemble(Trasmissione entity)
	    {
	        TrasmissioneDto dto = new TrasmissioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaId = entity.FatturaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Trasmissione entity, TrasmissioneDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

	    }
	
	    public override void AssembleCollections(Trasmissione entity, TrasmissioneDto dto)
	    {
	    }
	
	}
	
	
	public partial class TrasmissioneAssembler : TrasmissioneAssemblerBase, ITrasmissioneAssembler
	{
	    
	}
	
	public partial interface IAnagraficaClienteAssembler : IAssembler<AnagraficaClienteDto, AnagraficaCliente>
	{ 
	
	}
	
	public partial class AnagraficaClienteAssemblerBase : Assembler<AnagraficaClienteDto, AnagraficaCliente>
	{
		/// <summary>
	    /// Invoked after the AnagraficaClienteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaClienteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaClienteDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaCliente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaCliente"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaCliente entity);
		
	    public override AnagraficaCliente Assemble(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaCliente();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Cognome = dto.Cognome;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaClienteDto Assemble(AnagraficaCliente entity)
	    {
	        AnagraficaClienteDto dto = new AnagraficaClienteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Cognome = entity.Cognome;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(AnagraficaCliente entity, AnagraficaClienteDto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.AnagraficaCliente = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AnagraficaClienteAssembler : AnagraficaClienteAssemblerBase, IAnagraficaClienteAssembler
	{
	    
	}
	
	public partial interface IIncassoAssembler : IAssembler<IncassoDto, Incasso>
	{ 
	
	}
	
	public partial class IncassoAssemblerBase : Assembler<IncassoDto, Incasso>
	{
		/// <summary>
	    /// Invoked after the IncassoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="IncassoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(IncassoDto dto);
	
		/// <summary>
	    /// Invoked after the Incasso instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Incasso"/> instance.</param>
		partial void OnEntityAssembled(Incasso entity);
		
	    public override Incasso Assemble(Incasso entity, IncassoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Incasso();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaId = dto.FatturaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override IncassoDto Assemble(Incasso entity)
	    {
	        IncassoDto dto = new IncassoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaId = entity.FatturaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Incasso entity, IncassoDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

	    }
	
	    public override void AssembleCollections(Incasso entity, IncassoDto dto)
	    {
	    }
	
	}
	
	
	public partial class IncassoAssembler : IncassoAssemblerBase, IIncassoAssembler
	{
	    
	}
	
	public partial interface ISocioAssembler : IAssembler<SocioDto, Socio>
	{ 
	
	}
	
	public partial class SocioAssemblerBase : Assembler<SocioDto, Socio>
	{
		/// <summary>
	    /// Invoked after the SocioDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SocioDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SocioDto dto);
	
		/// <summary>
	    /// Invoked after the Socio instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Socio"/> instance.</param>
		partial void OnEntityAssembled(Socio entity);
		
	    public override Socio Assemble(Socio entity, SocioDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Socio();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.Cognome = dto.Cognome;
			entity.Nome = dto.Nome;
			entity.TipoCarica = dto.TipoCarica;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SocioDto Assemble(Socio entity)
	    {
	        SocioDto dto = new SocioDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.Cognome = entity.Cognome;
			dto.Nome = entity.Nome;
			dto.TipoCarica = entity.TipoCarica;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Socio entity, SocioDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Socio entity, SocioDto dto)
	    {
	    }
	
	}
	
	
	public partial class SocioAssembler : SocioAssemblerBase, ISocioAssembler
	{
	    
	}
	
	public partial interface IAnagraficaPAAssembler : IAssembler<AnagraficaPADto, AnagraficaPA>
	{ 
	
	}
	
	public partial class AnagraficaPAAssemblerBase : Assembler<AnagraficaPADto, AnagraficaPA>
	{
		/// <summary>
	    /// Invoked after the AnagraficaPADto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaPADto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaPADto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaPA instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaPA"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaPA entity);
		
	    public override AnagraficaPA Assemble(AnagraficaPA entity, AnagraficaPADto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaPA();
	        }
			
			entity.Id = dto.Id;
			entity.Codice = dto.Codice;
			entity.Denominazione = dto.Denominazione;
			entity.Comune = dto.Comune;
			entity.NomeResponsabile = dto.NomeResponsabile;
			entity.CognomeResponsabile = dto.CognomeResponsabile;
			entity.CAP = dto.CAP;
			entity.Provincia = dto.Provincia;
			entity.Regione = dto.Regione;
			entity.SitoIstituzionale = dto.SitoIstituzionale;
			entity.Indirizzo = dto.Indirizzo;
			entity.TitoloResponsabile = dto.TitoloResponsabile;
			entity.TipologiaIstat = dto.TipologiaIstat;
			entity.TipologiaAmministrazione = dto.TipologiaAmministrazione;
			entity.Acronimo = dto.Acronimo;
			entity.CfValidato = dto.CfValidato;
			entity.CodiceFiscale = dto.CodiceFiscale;
			entity.email1 = dto.email1;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaPADto Assemble(AnagraficaPA entity)
	    {
	        AnagraficaPADto dto = new AnagraficaPADto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Codice = entity.Codice;
			dto.Denominazione = entity.Denominazione;
			dto.Comune = entity.Comune;
			dto.NomeResponsabile = entity.NomeResponsabile;
			dto.CognomeResponsabile = entity.CognomeResponsabile;
			dto.CAP = entity.CAP;
			dto.Provincia = entity.Provincia;
			dto.Regione = entity.Regione;
			dto.SitoIstituzionale = entity.SitoIstituzionale;
			dto.Indirizzo = entity.Indirizzo;
			dto.TitoloResponsabile = entity.TitoloResponsabile;
			dto.TipologiaIstat = entity.TipologiaIstat;
			dto.TipologiaAmministrazione = entity.TipologiaAmministrazione;
			dto.Acronimo = entity.Acronimo;
			dto.CfValidato = entity.CfValidato;
			dto.CodiceFiscale = entity.CodiceFiscale;
			dto.email1 = entity.email1;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaPA entity, AnagraficaPADto dto)
	    {
	    }
	
	    public override void AssembleCollections(AnagraficaPA entity, AnagraficaPADto dto)
	    {
			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.AnagraficaPA = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AnagraficaPAAssembler : AnagraficaPAAssemblerBase, IAnagraficaPAAssembler
	{
	    
	}
	
	public partial interface IFatturaElettronicaHeaderAssembler : IAssembler<FatturaElettronicaHeaderDto, FatturaElettronicaHeader>
	{ 
	
	}
	
	public partial class FatturaElettronicaHeaderAssemblerBase : Assembler<FatturaElettronicaHeaderDto, FatturaElettronicaHeader>
	{
		/// <summary>
	    /// Invoked after the FatturaElettronicaHeaderDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaElettronicaHeaderDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaElettronicaHeaderDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaElettronicaHeader instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaElettronicaHeader"/> instance.</param>
		partial void OnEntityAssembled(FatturaElettronicaHeader entity);
		
	    public override FatturaElettronicaHeader Assemble(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaElettronicaHeader();
	        }
			
			entity.Id = dto.Id;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaElettronicaHeaderDto Assemble(FatturaElettronicaHeader entity)
	    {
	        FatturaElettronicaHeaderDto dto = new FatturaElettronicaHeaderDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

			DatiTrasmissioneAssembler datiTrasmissioneAssembler = new DatiTrasmissioneAssembler();
			dto.DatiTrasmissione = datiTrasmissioneAssembler.Assemble(entity.DatiTrasmissione);

	    }
	
	    public override void AssembleCollections(FatturaElettronicaHeader entity, FatturaElettronicaHeaderDto dto)
	    {
	    }
	
	}
	
	
	public partial class FatturaElettronicaHeaderAssembler : FatturaElettronicaHeaderAssemblerBase, IFatturaElettronicaHeaderAssembler
	{
	    
	}
	
	public partial interface IFatturaElettronicaBodyAssembler : IAssembler<FatturaElettronicaBodyDto, FatturaElettronicaBody>
	{ 
	
	}
	
	public partial class FatturaElettronicaBodyAssemblerBase : Assembler<FatturaElettronicaBodyDto, FatturaElettronicaBody>
	{
		/// <summary>
	    /// Invoked after the FatturaElettronicaBodyDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaElettronicaBodyDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaElettronicaBodyDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaElettronicaBody instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaElettronicaBody"/> instance.</param>
		partial void OnEntityAssembled(FatturaElettronicaBody entity);
		
	    public override FatturaElettronicaBody Assemble(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaElettronicaBody();
	        }
			
			entity.Id = dto.Id;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaElettronicaBodyDto Assemble(FatturaElettronicaBody entity)
	    {
	        FatturaElettronicaBodyDto dto = new FatturaElettronicaBodyDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
			FatturaAssembler fatturaAssembler = new FatturaAssembler();
			dto.Fattura = fatturaAssembler.Assemble(entity.Fattura);

	    }
	
	    public override void AssembleCollections(FatturaElettronicaBody entity, FatturaElettronicaBodyDto dto)
	    {
	    }
	
	}
	
	
	public partial class FatturaElettronicaBodyAssembler : FatturaElettronicaBodyAssemblerBase, IFatturaElettronicaBodyAssembler
	{
	    
	}
	
	public partial interface IDatiTrasmissioneAssembler : IAssembler<DatiTrasmissioneDto, DatiTrasmissione>
	{ 
	
	}
	
	public partial class DatiTrasmissioneAssemblerBase : Assembler<DatiTrasmissioneDto, DatiTrasmissione>
	{
		/// <summary>
	    /// Invoked after the DatiTrasmissioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DatiTrasmissioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DatiTrasmissioneDto dto);
	
		/// <summary>
	    /// Invoked after the DatiTrasmissione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DatiTrasmissione"/> instance.</param>
		partial void OnEntityAssembled(DatiTrasmissione entity);
		
	    public override DatiTrasmissione Assemble(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DatiTrasmissione();
	        }
			
			entity.Id = dto.Id;
			entity.ProgressivoInvio = dto.ProgressivoInvio;
			entity.FormatoTrasmissione = dto.FormatoTrasmissione;
			entity.CodiceDestinatario = dto.CodiceDestinatario;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DatiTrasmissioneDto Assemble(DatiTrasmissione entity)
	    {
	        DatiTrasmissioneDto dto = new DatiTrasmissioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ProgressivoInvio = entity.ProgressivoInvio;
			dto.FormatoTrasmissione = entity.FormatoTrasmissione;
			dto.CodiceDestinatario = entity.CodiceDestinatario;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
			FatturaElettronicaHeaderAssembler fatturaElettronicaHeaderAssembler = new FatturaElettronicaHeaderAssembler();
			dto.FatturaElettronicaHeader = fatturaElettronicaHeaderAssembler.Assemble(entity.FatturaElettronicaHeader);

			IdTrasmissioneAssembler idTrasmissioneAssembler = new IdTrasmissioneAssembler();
			dto.IdTrasmissione = idTrasmissioneAssembler.Assemble(entity.IdTrasmissione);

	    }
	
	    public override void AssembleCollections(DatiTrasmissione entity, DatiTrasmissioneDto dto)
	    {
	    }
	
	}
	
	
	public partial class DatiTrasmissioneAssembler : DatiTrasmissioneAssemblerBase, IDatiTrasmissioneAssembler
	{
	    
	}
	
	public partial interface IIdTrasmissioneAssembler : IAssembler<IdTrasmissioneDto, IdTrasmissione>
	{ 
	
	}
	
	public partial class IdTrasmissioneAssemblerBase : Assembler<IdTrasmissioneDto, IdTrasmissione>
	{
		/// <summary>
	    /// Invoked after the IdTrasmissioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="IdTrasmissioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(IdTrasmissioneDto dto);
	
		/// <summary>
	    /// Invoked after the IdTrasmissione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="IdTrasmissione"/> instance.</param>
		partial void OnEntityAssembled(IdTrasmissione entity);
		
	    public override IdTrasmissione Assemble(IdTrasmissione entity, IdTrasmissioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new IdTrasmissione();
	        }
			
			entity.Id = dto.Id;
			entity.IdPaese = dto.IdPaese;
			entity.IdCodice = dto.IdCodice;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override IdTrasmissioneDto Assemble(IdTrasmissione entity)
	    {
	        IdTrasmissioneDto dto = new IdTrasmissioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.IdPaese = entity.IdPaese;
			dto.IdCodice = entity.IdCodice;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(IdTrasmissione entity, IdTrasmissioneDto dto)
	    {
			DatiTrasmissioneAssembler datiTrasmissioneAssembler = new DatiTrasmissioneAssembler();
			dto.DatiTrasmissione = datiTrasmissioneAssembler.Assemble(entity.DatiTrasmissione);

	    }
	
	    public override void AssembleCollections(IdTrasmissione entity, IdTrasmissioneDto dto)
	    {
	    }
	
	}
	
	
	public partial class IdTrasmissioneAssembler : IdTrasmissioneAssemblerBase, IIdTrasmissioneAssembler
	{
	    
	}
	
	public partial interface IContattiTrasmittenteAssembler : IAssembler<ContattiTrasmittenteDto, ContattiTrasmittente>
	{ 
	
	}
	
	public partial class ContattiTrasmittenteAssemblerBase : Assembler<ContattiTrasmittenteDto, ContattiTrasmittente>
	{
		/// <summary>
	    /// Invoked after the ContattiTrasmittenteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ContattiTrasmittenteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ContattiTrasmittenteDto dto);
	
		/// <summary>
	    /// Invoked after the ContattiTrasmittente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="ContattiTrasmittente"/> instance.</param>
		partial void OnEntityAssembled(ContattiTrasmittente entity);
		
	    public override ContattiTrasmittente Assemble(ContattiTrasmittente entity, ContattiTrasmittenteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new ContattiTrasmittente();
	        }
			
			entity.Id = dto.Id;
			entity.Telefono = dto.Telefono;
			entity.Email = dto.Email;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ContattiTrasmittenteDto Assemble(ContattiTrasmittente entity)
	    {
	        ContattiTrasmittenteDto dto = new ContattiTrasmittenteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Telefono = entity.Telefono;
			dto.Email = entity.Email;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(ContattiTrasmittente entity, ContattiTrasmittenteDto dto)
	    {
	    }
	
	    public override void AssembleCollections(ContattiTrasmittente entity, ContattiTrasmittenteDto dto)
	    {
	    }
	
	}
	
	
	public partial class ContattiTrasmittenteAssembler : ContattiTrasmittenteAssemblerBase, IContattiTrasmittenteAssembler
	{
	    
	}
	
	public partial interface IAccountAssembler : IAssembler<AccountDto, Account>
	{ 
	
	}
	
	public partial class AccountAssemblerBase : Assembler<AccountDto, Account>
	{
		/// <summary>
	    /// Invoked after the AccountDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AccountDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AccountDto dto);
	
		/// <summary>
	    /// Invoked after the Account instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Account"/> instance.</param>
		partial void OnEntityAssembled(Account entity);
		
	    public override Account Assemble(Account entity, AccountDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Account();
	        }
			
			entity.Id = dto.Id;
			entity.StudioAziendaId = dto.StudioAziendaId;
			entity.Username = dto.Username;
			entity.Password = dto.Password;
			entity.Nickname = dto.Nickname;
			entity.Ruolo = dto.Ruolo;
			entity.Note = dto.Note;
			entity.Creazione = dto.Creazione;
			entity.Abilitato = dto.Abilitato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AccountDto Assemble(Account entity)
	    {
	        AccountDto dto = new AccountDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.StudioAziendaId = entity.StudioAziendaId;
			dto.Username = entity.Username;
			dto.Password = entity.Password;
			dto.Nickname = entity.Nickname;
			dto.Ruolo = entity.Ruolo;
			dto.Note = entity.Note;
			dto.Creazione = entity.Creazione;
			dto.Abilitato = entity.Abilitato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Account entity, AccountDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Account entity, AccountDto dto)
	    {
	    }
	
	}
	
	
	public partial class AccountAssembler : AccountAssemblerBase, IAccountAssembler
	{
	    
	}
}
#pragma warning restore 1591
